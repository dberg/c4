--------------------------------------------------------------------------------
  Server
--------------------------------------------------------------------------------

The server is responsible for the data flow between clients and projects residing on the server. The server implementation uses kqueue in bsd platforms like osx, and epoll when running on linux. The data passed between clients and the server is serialized and deserialized using Protocol Buffers in the classes Request and Response.

The server maintains a RequestBuffer object per connection until it has the data to form a Requests object. After a request object is built the server delivers the request to the ProjectHnadler object. The ProjectHandler object is responsible to deliver the request to its project.

The project process the request and returns a Response object which the server delivers to the client. Requests can also be issued from a project to the client. The project might ask the client for more information about the project. For example, the server might need the client to send more compilation units to resolve a global symbol table dependencies.

--------------------------------------------------------------------------------
  Data stream
--------------------------------------------------------------------------------

The bytestream sent between the client and the server are serialized Request or Response objects. The first 4 bytes in the bytestream represents the length of the serialized Request or Response data in network byte order.

--------------------------------------------------------------------------------
  Request
--------------------------------------------------------------------------------

REQUEST ::= ACTION METADATA BODY

ACTION ::= ACTION_PARSE | ACTION_GET

ACTION_PARSE ::= 0

ACTION_GET ::= 1

METADATA ::= PROJECT_ID PROJECT_NAME PROJECT_ROOT

PROJECT_ID ::= string

PROJECT_NAME ::= string

PROJECT_ROOT ::= string

BODY ::= BODY_PARSE | BODY_GET

BODY_PARSE ::= FILENAME | BUFFER

FILE_NAME :: string

BUFFER :: string

BODY_GET ::= COMPILATION_UNIT_LIST

COMPILATION_UNIT_LIST ::= string+

--------------------------------------------------------------------------------
  Response
--------------------------------------------------------------------------------

RESPONSE ::= RESPONSE_CODE [ ERROR_MESSAGE ]

RESPONSE_CODE ::= RESPONSE_OK | RESPONSE_ERROR

RESPONSE_OK ::= 0

RESPONSE_ERROR ::= 1

ERROR_MESSAGE = string

--------------------------------------------------------------------------------
  Project
--------------------------------------------------------------------------------

A Project instance contains metadata about the project, a map of compilation units and a global symbol table.

--------------------------------------------------------------------------------
  Questions
--------------------------------------------------------------------------------

  1. Check how multiplexed writes work.

  2. If the connection is broken, how are we notified so we can remove the mapping between the socket and Project instance?

