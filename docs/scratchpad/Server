--------------------------------------------------------------------------------
  Server
--------------------------------------------------------------------------------

The Server is responsible to maintain connections with c4 clients and to manage the data flow, using a MessageBuffer instance, between the client and the projects that are active on the server at any point in time.

The Server uses kqueue for bsd and osx, and epoll for linux. Shared code is inside Server.h and the platform specific code can be found in the files ServerBSD.cpp and ServerLinux.cpp.

When the Server is reading data, it buffers all incoming bytes in a MessageBuffer object until it has a complete Message object. On the other end, when asked to send a Message to the client, the Server will transform the Message into a MessageBuffer and hold it until the complete Message is sent to the client or a connection problem is found.

After the Server has read a complete Message, it sends the Message to the ProjectHandler instance, which in turn, will match the Message to the correct Project instance, and pass the Message to the Project to process it.

  Server -> ProjectHandler -> Project

The ProjectHandler, upon receiving a complete Message and matching it to a Project instance, takes a thread out of a thread pool, and asks the Project instance to process the Message. For example, a Message can be a request to process a compilation unit. The result of processing the compilation is a different type of Message which contains a response to the Client. The flow is then inverted:

  Project -> ProjectHandler -> Server

--------------------------------------------------------------------------------
  Message data stream
--------------------------------------------------------------------------------

Messages sent between the client and the c4 server consists of the message size
followed by the message content in network byte order. The message size is an
unsigned 32 bit value.

  MESSAGE_SIZE MESSAGE

--------------------------------------------------------------------------------
  Questions
--------------------------------------------------------------------------------

  1. Check how multiplexed writes work.

  2. If the connection is broken, how are we notified so we can remove the mapping between the socket and Project instance?

