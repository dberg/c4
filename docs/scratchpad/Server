The Server is responsible to maintain connections with c4 clients. Its main purpose is to manage the data flow between the client and the projects that are active on the server.

When the Server starts it triggers the following actions:

  - Create listening socket
  - Initialize kqueue*
  - Initialize kevent arrays
  - Setup kevent structure with listening socket
  - loop && kevent syscall
    - case error
    - case listening socket
    - case socket has data to be read
      - read data and send it to Project

* BSD specific. We'll have something similar for Linux using epoll.

--------------------------------------------------------------------------------

Questions:

  1. how multiplexed writes work? Also, if we have more data than the kernel buffer can receive we should keep the remaining bytes to be sent until kernel buffer has space for it.

  2. If the connection is broken, how are we notified so we can remove the mapping between the socket and Project instance?

--------------------------------------------------------------------------------

The Server has an instance of MessageHandler.

When the server reads data, it sends the data to the MessageHandler. The first job of the MessageHandler is to buffer data. When receiving data it should buffer data until it has a complete message. When sending data it should buffer data until the entire message is sent or a connection is broken.

When the MessageHandler has a complete message it passes the message to the ProjectHandler instance, which in turn will direct the message to the correct Project instance to process the message.

  Server -> MessageHandler -> ProjectHandler -> Project

The ProjectHandler, upon receiving a complete message, takes a thread out of a thread pool, and asks the Project instance to process the message. For example, a message can be a request to process a compilation unit.

When the message is processed by the Project instance, a message for the client is returned to the ProjectHandler, which asks the MessageHandler to deliver this message to the Client.

  Project -> ProjectHandler -> MessageHandler -> Server

