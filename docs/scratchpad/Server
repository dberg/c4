--------------------------------------------------------------------------------
  Server
--------------------------------------------------------------------------------

The server is responsible for the data flow between clients and projects residing on the server. The server maintains a RequestBuffer object per connection until it has the complete data to form a Request from the client. After a Request is formed in a RequestBuffer the server delivers the Request to the targeted Project. The project will build a Response, which the server will deliver to client. The communication is also valid from the Project to the client. The Project might create a Request asking the client for more information about the Project.

The server uses kqueue in bsd platforms like osx, and epoll if running on linux. Shared code is inside Server.h and the platform specific code can be found in the files ServerBSD.cpp and ServerLinux.cpp. The data is serialized and deserialized using Protocol Buffers in the classes Request and Response.

The server sends a request to the ProjectHandler instance, which in turn, will match the Request to the targeted Project instance, and pass the Request to the Project to process it.

  RequestBuffer -> Request -> Server -> ProjectHandler -> Project

The ProjectHandler, upon receiving a Request and matching it to a Project instance, takes a thread out of a thread pool, and asks the Project instance to process the Message. For example, a Request can ask to process a compilation unit. The result of processing a Request is a Response that the server will deliver to the client.

--------------------------------------------------------------------------------
  Data stream
--------------------------------------------------------------------------------

Requests and Responses sent between the client and the c4 server consists of the serialized message length followed by the message in network byte order. The message size is an unsigned 32 bit value.

  MESSAGE_SIZE MESSAGE

--------------------------------------------------------------------------------
  Questions
--------------------------------------------------------------------------------

  1. Check how multiplexed writes work.

  2. If the connection is broken, how are we notified so we can remove the mapping between the socket and Project instance?

