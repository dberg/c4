--------------------------------------------------------------------------------
  Server
--------------------------------------------------------------------------------

The server is responsible for the data flow between clients and projects residing on the server. The server implementation uses kqueue in bsd platforms and osx, and epoll when running on linux. The data passed between clients and the server is serialized and deserialized using Protocol Buffers. The messages are represented in the classes Request and Response which are auto-generated by the Protocol Buffer compiler.

The server maintains a RequestBuffer object per connection until it has the complete data to form a Requests object. After a request object is built the server delivers the request to the ProjectHandler object. The ProjectHandler object is responsible to deliver the request to its project. If no project exists the ProjectHandler creates one.

The project process the request and returns a Response object which the server delivers to the client.

--------------------------------------------------------------------------------
  Data stream
--------------------------------------------------------------------------------

The bytestream sent between the client and the server is serialized and deserialized using the auto-generated classes Request and Response. The first 4 bytes in the bytestream indicates the length of the serialized Request or Response data in network byte order.

--------------------------------------------------------------------------------
  Request
--------------------------------------------------------------------------------

Every request must set the attributes "projectId" and "action". The projectId attribute must be generated by the client and it should be unique per project. The action attribute can be of two types: PROJECT and COMPILE.

PROJECT: A client issues this method to query the status of the project. The server will indicate if it has all the compilation units of the project and if not which symbols are missing.

COMPILE: The client issues this method to send a list of compilation units to be parsed by the project.

--------------------------------------------------------------------------------
  Response
--------------------------------------------------------------------------------

RESPONSE ::= RESPONSE_CODE [ ERROR_MESSAGE ]

RESPONSE_CODE ::= RESPONSE_OK | RESPONSE_ERROR

RESPONSE_OK ::= 0

RESPONSE_ERROR ::= 1

ERROR_MESSAGE = string

--------------------------------------------------------------------------------
  Project
--------------------------------------------------------------------------------

A Project instance is identified by a projectId that is generated by the client, compilation units and a global symbol table.

--------------------------------------------------------------------------------
  Questions
--------------------------------------------------------------------------------

  1. Check how multiplexed writes work.

  2. If the connection is broken, how are we notified so we can remove the mapping between the socket and Project instance?

