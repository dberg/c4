- [ ] Parse AnnotationElement : ElementValuePairs
- [ ] Parser::parseElementValue Expression1
- [ ] Parser::parseElementValue ElementValueArrayInitializer
- [ ] Parser::parseExpression2 Expression2Rest
- [ ] Parser::parseExpression3 Primary { Selector } { PostfixOp }
- [ ] Parser::parseExpression1 Expression1Rest
- [ ] Parse ClassBodyDeclaration
- [ ] Parse MemberDecl
- [ ] Parse EnumDeclaration
- [ ] Parse InterfaceDeclaration
- [ ] Improve AST structures with Unions
- [ ] Export Symbol table and helper mapper to elisp (pos -> symbol table)
- [X] We should be able to add errors from the Lexer and not only
      from the Parser.
- [X] Parse FloatingPointLiteral
  - [X] DecimalFloatingPointLiteral
  - [X] HexadecimalFloatingPointLiteral
- [X] Parse IntegerLiteral
  - [X] DecimalIntegerLiteral
  - [X] HexIntegerLiteral
  - [X] OctalIntegerLiteral
  - [X] BinaryIntegerLiteral
- [X] Fix bogus responses from "1234 L". We currently get two tokens
      TOK_DECIMAL_NUMERAL TOK_INTEGER_TYPE_SUFFIX
      We can remove and TOK_INTEGER_TYPE_SUFFIX and add
      TOK_DECIMAL_NUMERL_WITH_INT_TYPE_SUFFIX as an optional response from
      getNumberToken method.
- [X] Fix tests/lib/ParserTest.cpp:204: Failure
      Value of: formParamDecls->formParamDeclsRest->varDeclId->arrayDepth
      Actual: 0; Expected: 1

      The test is incorrect. Parsing "int[] a" produces:
      FormalParameterDecls->Type->arrayDept == 1
      FormalParameterDecls->VariableDeclaratorId->arrayDepth = 0
- [X] Parse TokenIdentifier BooleanLiteral and NullLiteral
- [X] Errors are not flushed from buffer
      If we type:
        "@ class A {}"
      And then fix it, the error is not removed
        "@Ann class A {}"
- [X] Emacs Output bug:
      class A {A() {}}
                     ^
                     "Expected opening parenthesis"
- [X] Start parsing method parameters
- [X] Start parsing Constructor
- [X] Start symbol table and helper
- [X] Handle errors on emacs mode. Underline and error message.
- [X] Start emacs output of TypeDeclarations
- [X] Handle multiple TypeDeclarations
- [X] Start work on TypeDeclarations
- [X] Fix annotations in example
      "@myinterface\npublic class A{}"
- [X] Test emacs output
- [X] Add helper function to handle tokens in the Output.
      Ex.: QualifiedId
- [X] Update emacs output with import declarations
- [X] Initial work on import delarations
- [X] Add unit test framework
- [X] Start output of compilation unit
- [X] Fix length of package qualified-id
      package com.mypackge;
