// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Request.proto

#ifndef PROTOBUF_Request_2eproto__INCLUDED
#define PROTOBUF_Request_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace c4 {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Request_2eproto();
void protobuf_AssignDesc_Request_2eproto();
void protobuf_ShutdownFile_Request_2eproto();

class Request;

enum Request_Action {
  Request_Action_PARSE = 0,
  Request_Action_GET = 1
};
bool Request_Action_IsValid(int value);
const Request_Action Request_Action_Action_MIN = Request_Action_PARSE;
const Request_Action Request_Action_Action_MAX = Request_Action_GET;
const int Request_Action_Action_ARRAYSIZE = Request_Action_Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_Action_descriptor();
inline const ::std::string& Request_Action_Name(Request_Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_Action_descriptor(), value);
}
inline bool Request_Action_Parse(
    const ::std::string& name, Request_Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_Action>(
    Request_Action_descriptor(), name, value);
}
// ===================================================================

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Request_Action Action;
  static const Action PARSE = Request_Action_PARSE;
  static const Action GET = Request_Action_GET;
  static inline bool Action_IsValid(int value) {
    return Request_Action_IsValid(value);
  }
  static const Action Action_MIN =
    Request_Action_Action_MIN;
  static const Action Action_MAX =
    Request_Action_Action_MAX;
  static const int Action_ARRAYSIZE =
    Request_Action_Action_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Action_descriptor() {
    return Request_Action_descriptor();
  }
  static inline const ::std::string& Action_Name(Action value) {
    return Request_Action_Name(value);
  }
  static inline bool Action_Parse(const ::std::string& name,
      Action* value) {
    return Request_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .c4.Request.Action action = 1;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 1;
  inline ::c4::Request_Action action() const;
  inline void set_action(::c4::Request_Action value);

  // optional string filename = 2;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 2;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional string buffer = 3;
  inline bool has_buffer() const;
  inline void clear_buffer();
  static const int kBufferFieldNumber = 3;
  inline const ::std::string& buffer() const;
  inline void set_buffer(const ::std::string& value);
  inline void set_buffer(const char* value);
  inline void set_buffer(const char* value, size_t size);
  inline ::std::string* mutable_buffer();
  inline ::std::string* release_buffer();
  inline void set_allocated_buffer(::std::string* buffer);

  // repeated string compilationUnitList = 4;
  inline int compilationunitlist_size() const;
  inline void clear_compilationunitlist();
  static const int kCompilationUnitListFieldNumber = 4;
  inline const ::std::string& compilationunitlist(int index) const;
  inline ::std::string* mutable_compilationunitlist(int index);
  inline void set_compilationunitlist(int index, const ::std::string& value);
  inline void set_compilationunitlist(int index, const char* value);
  inline void set_compilationunitlist(int index, const char* value, size_t size);
  inline ::std::string* add_compilationunitlist();
  inline void add_compilationunitlist(const ::std::string& value);
  inline void add_compilationunitlist(const char* value);
  inline void add_compilationunitlist(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& compilationunitlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_compilationunitlist();

  // @@protoc_insertion_point(class_scope:c4.Request)
 private:
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_buffer();
  inline void clear_has_buffer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* filename_;
  ::std::string* buffer_;
  ::google::protobuf::RepeatedPtrField< ::std::string> compilationunitlist_;
  int action_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Request_2eproto();
  friend void protobuf_AssignDesc_Request_2eproto();
  friend void protobuf_ShutdownFile_Request_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// ===================================================================


// ===================================================================

// Request

// required .c4.Request.Action action = 1;
inline bool Request::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::c4::Request_Action Request::action() const {
  return static_cast< ::c4::Request_Action >(action_);
}
inline void Request::set_action(::c4::Request_Action value) {
  assert(::c4::Request_Action_IsValid(value));
  set_has_action();
  action_ = value;
}

// optional string filename = 2;
inline bool Request::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& Request::filename() const {
  return *filename_;
}
inline void Request::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void Request::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void Request::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* Request::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string buffer = 3;
inline bool Request::has_buffer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_buffer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_buffer() {
  if (buffer_ != &::google::protobuf::internal::kEmptyString) {
    buffer_->clear();
  }
  clear_has_buffer();
}
inline const ::std::string& Request::buffer() const {
  return *buffer_;
}
inline void Request::set_buffer(const ::std::string& value) {
  set_has_buffer();
  if (buffer_ == &::google::protobuf::internal::kEmptyString) {
    buffer_ = new ::std::string;
  }
  buffer_->assign(value);
}
inline void Request::set_buffer(const char* value) {
  set_has_buffer();
  if (buffer_ == &::google::protobuf::internal::kEmptyString) {
    buffer_ = new ::std::string;
  }
  buffer_->assign(value);
}
inline void Request::set_buffer(const char* value, size_t size) {
  set_has_buffer();
  if (buffer_ == &::google::protobuf::internal::kEmptyString) {
    buffer_ = new ::std::string;
  }
  buffer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_buffer() {
  set_has_buffer();
  if (buffer_ == &::google::protobuf::internal::kEmptyString) {
    buffer_ = new ::std::string;
  }
  return buffer_;
}
inline ::std::string* Request::release_buffer() {
  clear_has_buffer();
  if (buffer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = buffer_;
    buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_buffer(::std::string* buffer) {
  if (buffer_ != &::google::protobuf::internal::kEmptyString) {
    delete buffer_;
  }
  if (buffer) {
    set_has_buffer();
    buffer_ = buffer;
  } else {
    clear_has_buffer();
    buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string compilationUnitList = 4;
inline int Request::compilationunitlist_size() const {
  return compilationunitlist_.size();
}
inline void Request::clear_compilationunitlist() {
  compilationunitlist_.Clear();
}
inline const ::std::string& Request::compilationunitlist(int index) const {
  return compilationunitlist_.Get(index);
}
inline ::std::string* Request::mutable_compilationunitlist(int index) {
  return compilationunitlist_.Mutable(index);
}
inline void Request::set_compilationunitlist(int index, const ::std::string& value) {
  compilationunitlist_.Mutable(index)->assign(value);
}
inline void Request::set_compilationunitlist(int index, const char* value) {
  compilationunitlist_.Mutable(index)->assign(value);
}
inline void Request::set_compilationunitlist(int index, const char* value, size_t size) {
  compilationunitlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::add_compilationunitlist() {
  return compilationunitlist_.Add();
}
inline void Request::add_compilationunitlist(const ::std::string& value) {
  compilationunitlist_.Add()->assign(value);
}
inline void Request::add_compilationunitlist(const char* value) {
  compilationunitlist_.Add()->assign(value);
}
inline void Request::add_compilationunitlist(const char* value, size_t size) {
  compilationunitlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Request::compilationunitlist() const {
  return compilationunitlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Request::mutable_compilationunitlist() {
  return &compilationunitlist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace c4

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c4::Request_Action>() {
  return ::c4::Request_Action_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Request_2eproto__INCLUDED
